# -*- coding: utf-8 -*-
"""W4_task6_vendor_scorecard_engine.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17DVTs2JVUv2ohsNorr0M0vb6rQ6qNq3h
"""

import pandas as pd
from datetime import datetime
import re
from collections import defaultdict

# ---------- Helper Functions ----------

def extract_price(text):
    """Extracts the first price entity (ETB) using regex or your NER model."""
    prices = re.findall(r'(\d{3,5})\s?(?:ETB|Birr|ብር)', text)
    return float(prices[0]) if prices else None

def get_posting_frequency(dates):
    """Calculate posts/week based on unique weeks between first and last post."""
    if len(dates) < 2:
        return 0
    sorted_dates = sorted(dates)
    delta_days = (sorted_dates[-1] - sorted_dates[0]).days
    weeks = max(delta_days / 7, 1)
    return round(len(dates) / weeks, 2)

# ---------- Main Vendor Scoring Engine ----------

def vendor_scorecard(vendor_posts_dict):
    """
    Expects a dict: {vendor_name: [{text, views, timestamp}, ...]}
    Returns: pd.DataFrame with scorecard per vendor
    """
    scorecard = []

    for vendor, posts in vendor_posts_dict.items():
        post_dates = [datetime.fromisoformat(p['timestamp']) for p in posts]
        views = [p['views'] for p in posts if 'views' in p]
        prices = [extract_price(p['text']) for p in posts]
        prices = [p for p in prices if p is not None]

        if not views or not post_dates:
            continue

        # Metrics
        avg_views = sum(views) / len(views)
        freq = get_posting_frequency(post_dates)
        avg_price = sum(prices) / len(prices) if prices else 0
        top_post = max(posts, key=lambda x: x['views'])
        lending_score = round((avg_views * 0.5) + (freq * 0.5), 2)

        scorecard.append({
            "Vendor": vendor,
            "Avg. Views/Post": round(avg_views),
            "Posts/Week": freq,
            "Avg. Price (ETB)": round(avg_price, 2),
            "Top Product": top_post['text'][:50],
            "Top Views": top_post['views'],
            "Lending Score": lending_score
        })

    return pd.DataFrame(scorecard).sort_values("Lending Score", ascending=False)

# Generate and display the scorecard
scorecard_df = vendor_scorecard(vendor_posts_dict)
print(scorecard_df)